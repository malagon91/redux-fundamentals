PRIMER AVISTAMIENTO DE REDUX 


Redux es un contenedor predecible del estado de aplicaciones JavaScript.
Te ayuda a escribir aplicaciones que se comportan de manera consistente, corren en distintos ambientes 
(cliente, servidor y nativo), y son fáciles de probar. Además de eso, provee una gran experiencia de 
desarrollo, gracias a edición en vivo combinado con un depurador sobre una línea de tiempo.
Puedes usar Redux combinado con React, o cual cualquier otra librería de vistas. Es muy pequeño (2kB) y 
no tiene dependencias.

El segundo principio de Redux es que el árbol de estado es de sólo lectura. 
No puede modificar ni escribir en él. En su lugar, siempre que desee cambiar el estado, 
debe enviar una acción.
Una acción es un objeto JavaScript que describe el cambio. Al igual que el estado es la representación 
mínima de los datos en su aplicación, la acción es la representación mínima del cambio a esos datos.

Pure functions do not have any observable side effects, such as network or database calls. 
The pure functions just calculate the new value. You can be confident that if you call the pure function 
with the same set of arguments, you're going to get the same returned value. They are predictable.

    // Pure function
    function square(x){
    return x * x;
    }
 
    // Pure function
    function squareAll(items){
    return items.map(square);
    }

On the opposite, impure functions may call the database or the network, they may have side effects, 
they may operate on the DOM, and they may override the values that you pass to them.

// Impure functions
function square(x){
  updateXInDatabase(x);
  return x * x;
}
function squareAll(items){
  for (let i = 0; i < items.length; i++) {
    items[i] = square(items[i]);
  }
}

There is something in common between all Redux applications. They have to implement the reducer: 
a function that calculates the next state tree based on the previous state tree and the action being 
dispatched.
We are presenting a “complete” example in the code window below. Feel free to click around and explore! 
We will be explaining what everything does during this course.

The third and the last principle of Redux. To describe state mutations, you have to write a function 
that takes the previous state of the app, the action being dispatched, and returns the next state of the app.
 This function has to be pure. This function is called the Reducer.

Los 3 metodos de los stores en redux
The first method of this store is called "getState". It retrieves the current state of the Redux store. If we were on 
this, we're going to see 0 because this is the initial state of our application.

The second and the most commonly used store method is called "dispatch". It lets you dispatch actions to change the 
state of your application. If we log this store state after dispatch, we're going to see that it has changed.

Of course, always log into the console gets boring, so we're actually going to render something to the body with the 
help of the third Redux store method, called subscribe. It lets you register a callback that the Redux store will call 
any time an action has been dispatched, so that you can update the UI of your application. It will reflect the current 
application state.


MIS NOTAS: 

REdux es un contenedor de una app de js donde el los principales puntos son : 
* Todos los datos deben provenir de una sola fuente de datos (store)
* REdux debe contener toda la aplicacion en un solo objeto 

-El objeto de redux no se puede modificar, para modificar el objeto se tiene que mandar una accion 

-Para redux debemos usar solo funciones puras

-El reducer es una funcion pura que toma el objeto anterior de nuestra app, la accion que realizara y devuelve
el siguiente valor de la app

-en redux no podemos usar metodo mutables (impuros) por eso tengo que ver nuevos metodos para manejar el array 
por ejemplo para eliminar un elemento de un array se usa splice pero este metodo no se puede usar en redux porque es 
mutable 

 -- Otras de las funciones que podemos usar en redux e Object.assign que funciona bien pero solo es entendida por ES6
 por los navegadores viejos no la entenderan, mismo problema que con el proyecto en NJSFDA

--El proyecto empezo a tomar forma pero fuera de react he revisado que se pueden combinar reducers y asi tener un objeto
pero de diferentes fuentes ejemplo :
const { combineReducers } = Redux;
const todoApp = combineReducers({
  todos,
  visibilityFilter
});




npm i -S react-redux
npm i -D redux-devtools
